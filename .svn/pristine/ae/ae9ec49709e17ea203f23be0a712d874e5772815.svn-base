<?php/** * Created by PhpStorm. * User: admin * Date: 2017/7/4 * Time: 17:11 */namespace app\admin\controller;use think\Request;use think\wx\Utils\HttpCurl;use \Exception;use think\Db;use app\admin\module\Package;use app\common\model\Stock;class Test  extends Base {	public function testSmsSchedule()	{		$data = [			[	            'idsite' => '8',	            'idaccount' => '0',	            'username' => '系统消息',	            'type' => '8',	            'create_time' => '2019-04-24 09:56:16',	            'send_time' => '2019-04-24 09:56:16',	            'ip' => '218.17.137.41',	            'ssid' => 'F80D755052FEB6BB85516CD08B24C9DE',	            'mobile' => '17722637391',	            'content' => '童享云体验，您好，您报名的免费2已审核通过，请提前安排好出行计划，准时参加。更多信息请到公众号的【会员中心】-【我的报名】中查看。',		    ],		    [	            'idsite' => '8',	            'idaccount' => '0',	            'username' => '系统消息',	            'type' => '8',	            'create_time' => '2019-04-24 09:56:16',	            'send_time' => '2019-04-24 09:56:16',	            'ip' => '218.17.137.41',	            'ssid' => 'F80D755052FEB6BB85516CD08B24C9DE',	            'mobile' => '18271678257',	            'content' => '童享云体验您好，报名的免费2已审核通过，请安排跟进。',		    ]		];		$siteId = 8;		$sendNum = 3;		$res = smsSchedule($siteId, $sendNum, $data);		print_r($res);	}    public function test()    {    }	public function testGetSmsStatus()	{		$config = config('msg_config');		$data = [			'cid'=> $config['data']['cid'],//客户端ID            'pwd'=> $config['data']['pwd'],//客户端密码            // 'ssid' => 'BBBC6351FE882DD667C27BA115EEAB6F',		];		// $url = $config['getreport_url'];		$url = 'http://58.68.247.137:9053/communication/fetchReports.ashx';		// $url = 'http://58.68.247.137:9053/communication/fetchDelivers.ashx';		$url .= '?' . http_build_query($data);		var_dump($url);die;		$result = HttpCurl::get($url);        file_put_contents('rs.log', $result);        print_r($result);	}	public function testFreeOrderText()	{		$order = db('order')->where(['ordersn' => '20190424174831983126'])->find();		$res = sysSendMsg(8, 7, $order, []);    }    public function log()    {        $sql = 'select * from mysql.general_log order by event_time desc limit 100';        $data = Db::query($sql);        var_dump($data);        die;    }    public function dpPull($num)    {        $cash = [1,4,7,13];        $arr = [[0,0]];        for ($i = 1; $i <= $num; $i++)        {            $count = $num;            $curCash = 0;            foreach ($cash as $v)            {                if($i >= $v && ($arr[$i - $v][0] + 1) < $count)                {                    $count = $arr[$i - $v][0] + 1;                    $curCash = $v;                }            }            $arr[$i] = [$count, $curCash];            if(count($arr) > 13)                unset($arr[$i - 13]);        }        var_dump($arr[$num]);    }    public function dpPush($num)    {        $cash = [1,4,7,13];        $arr = [[0,0]];        for($i = 0; $i <= $num; $i++)        {            if(isset($arr[$i]))            {                foreach ($cash as $v)                {                    if( $i + $v <= $num && (!isset($arr[$i + $v]) || $arr[$i][0] + 1 < $arr[$i + $v][0]))                    {                        // if(is_array($arr[$i][0])){var_dump($arr, $i);die;}                        $arr[$i + $v] = [$arr[$i][0] + 1, $v];                    }                }            }else            {                $count = $num;                $curCash = 0;                foreach ($cash as $v)                {                    if($i >= $v && ($arr[$i - $v][0] + 1) < $count)                    {                        $count = $arr[$i - $v][0] + 1;                        $curCash = $v;                    }                }                $arr[$i] = [$count, $curCash];            }            if(count($arr) > 13)                unset($arr[$i - 13]);        }        ksort($arr);        var_dump($arr[$num]);            }    public function format_bytes($size, $delimiter = '') {        $units = array('B', 'KB', 'MB', 'GB', 'TB', 'PB');        for ($i = 0; $size >= 1024 && $i < 5; $i++) $size /= 1024;        return round($size, 2) . $delimiter ." ".$units[$i];    }    public function run($num, $action)    {        $start = microtime(true);        echo "内存初始状态：" . $this->format_bytes(memory_get_usage());        echo "<hr/>";        echo $this->$action($num);        echo '<hr>';        $end = microtime(true);        $time = $end - $start;        echo '消耗时间:' . $time;        echo '<hr>';        echo "最终内存状态：" . $this->format_bytes(memory_get_usage());        echo "<hr/>";        echo "内存峰值状态：" . $this->format_bytes(memory_get_peak_usage());    }    public function lis()    {        $list = [1,5,2,3,6,9,2,3,5,7,8];        $result = [];        foreach ($list as $k => $v)        {            $result[$k] = 1;            for($i = 0; $i < $k; $i++)            {                if($list[$i] <= $v)                {                    $result[$k] = max($result[$k], $result[$i] + 1);                }            }        }        var_dump($result);    }    public function cutDp($size)    {        $price = [            0 => 0,            1 => 1,            2 => 5,            3 => 8,            4 => 9,            5 => 10,            6 => 17,            7 => 20,            8 => 24,            9 => 30        ];        $idealPrice = $price;        for($i = 1; $i <= $size; $i++)        {            for($j = 1; $j <= $i && $j < count($price); $j++)            {                $idealPrice[$i] = max($idealPrice[$i], $idealPrice[$i - $j] + $idealPrice[$j]);            }        }        var_dump($idealPrice);        return $idealPrice[$size];    }    public function cutMemo($size, &$idealPrice = [])    {        $price = [            0 => 0,            1 => 1,            2 => 5,            3 => 8,            4 => 9,            5 => 10,            6 => 17,            7 => 20,            8 => 24,            9 => 30        ];        if(isset($idealPrice[$size]))        {            return $idealPrice[$size];        }        $idealPrice[$size] = $price[$size];        for($i = 1; $i <= $size; $i++)        {            $idealPrice[$size] = max($idealPrice[$size], $this->cutMemo($size - $i, $idealPrice) + $price[$i]);        }        var_dump($idealPrice);        return $idealPrice[$size];    }    public function cut($size)    {        $price = [            0 => 0,            1 => 1,            2 => 5,            3 => 8,            4 => 9,            5 => 10,            6 => 17,            7 => 20,            8 => 24,            9 => 30        ];        $result = $price[$size];        for($i = 1; $i <= $size; $i++)        {            $result = max($result, $this->cut($size - $i) + $price[$i]);        }        return $result;    }    public function fibonacci($value)    {        $fibonacciArray = [0, 1];        for($i = 2; $i <= $value; $i++)        {            $fibonacciArray[$i] = $fibonacciArray[$i - 1] + $fibonacciArray[$i - 2];            unset($fibonacciArray[$i - 2]);        }        var_dump($fibonacciArray);    }  	public function transferItemToTable()  	{        $key1 = [            'keyword1',            'keyword2',            'original_price',            'member_price',            'cost_price',            'level1_commission_rate',            'level2_commission_rate',            'level3_commission_rate',            'expire_at',            'package_sum',        ];        $activities = db('activity')->select();        $data = [];        foreach ($activities as $id => $activity)        {      		$str = $activity['selcontent'];            if(!$str) continue;            $arr = explode('☆', $str);            $tmp = [];            foreach ($arr as $key => $value) {                $value = explode('∮', $value);                foreach ($value as $k => $v) {                    $tmp[$k][$key] = $v ? : 0;                }            }            foreach ($tmp as $key => $value) {                if(count($value) < count($key1))                {                    $len = count($value);                    while($len != count($key1))                    {                        $value[] = 0;                        $len++;                    }                }                $tmp = array_combine($key1, $value);                $tmp['activity_id'] = $activity['idactivity'];                $tmp['stock'] = $tmp['package_sum'];                if($tmp['expire_at'])                {                    $tmp['expire_at'] = strtotime($tmp['expire_at']);                }                $data[] = $tmp;            }        }        // var_dump($data);die;        db('package')->insertAll($data);        var_dump($data);  	}    public function testNotify()    {        $xml = <<<XML        <xml><appid><![CDATA[wxd79730a60b28b7b4]]></appid>                <bank_type><![CDATA[CFT]]></bank_type>                <cash_fee><![CDATA[1]]></cash_fee>                <fee_type><![CDATA[CNY]]></fee_type>                <is_subscribe><![CDATA[Y]]></is_subscribe>                <mch_id><![CDATA[1511368881]]></mch_id>                <nonce_str><![CDATA[X5Sgl3rVGgpANheBlCjoPRMBlkvrm3r2]]></nonce_str>                <openid><![CDATA[oZS4v1aiMfreRinDgG-uWZFEDpnk]]></openid>                <out_trade_no><![CDATA[1534125205]]></out_trade_no>                <result_code><![CDATA[SUCCESS]]></result_code>                <return_code><![CDATA[SUCCESS]]></return_code>                <sign><![CDATA[E49A339E327F7E3054EFC786E0177DC4]]></sign>                <time_end><![CDATA[20180813095333]]></time_end>                <total_fee>1</total_fee>                <trade_type><![CDATA[JSAPI]]></trade_type>                <transaction_id><![CDATA[4200000161201808135093928210]]></transaction_id>                </xml>XML;                    }  	public function downloadLog()  	{  		$dir = date('Ym');  		$name = date('d') . '.log';  		$file = RUNTIME_PATH . 'log' . DS .$dir . DS .$name;  		if(file_exists($file)){			header("Content-type:application/octet-stream");			$filename = basename($file);			header("Content-Disposition:attachment;filename = ".$filename);			header("Accept-ranges:bytes");			header("Accept-length:".filesize($file));			readfile($file);		}else{			echo "<script>alert('文件不存在')</script>";		}  	}}